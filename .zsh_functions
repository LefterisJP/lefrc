#!/bin/zsh

# Checks that a process is running
function process-is-running () {
    pid=$(pidof $1)
    if [ $? -ne 0 ]; then
        return 1
    fi

    `kill -s 0 $pid`
    if [ $? -ne 0 ]; then
        return 1
    fi
}

# Make sure that a given process (by name) is running
# If it's not running, open it in the background
# Args:
# $1        Process name
# $2        nohup - 1 / 0, decides if the process should be
#           die when its parent terminal dies. 1 means it does not die.
#           Default is 1
#
function query-or-start-process () {
    process-is-running $1
    if [ $? -eq 0 ]; then
        return 0
    fi
    if [[ $# -lt 2 || $2 -eq 1 ]]; then
        `nohup $1 > /dev/null 2>&1 &`
    else
        print "no nohup"
        `$1 > /dev/null 2>&1 &`
    fi

    if [ $? -ne 0 ]; then
        return 1
    fi
}

# Determines my location by checking the environment
# Returns:
# 1 - Home development
# 2 - Work development
# 3 - Work chroot
#
# 0 - error
function determine-location() {
    local __hostname=$(hostname)
    # local __etc_issue=$(cat /etc/issue)
    # have funny error with local:
    # determine-location:local:2: not valid in this context: \r
    __etc_issue=$(cat /etc/issue)



    if [[ $__hostname == "archdesktop" ]]; then
        return 1
    elif [[ $__hostname == "archlenovo" ]]; then
        if [[ $__etc_issue =~ ".*Debian GNU/Linux.*" ]]; then
            return 3
        fi
        return 2
    fi

    return 0
}


# ask the user (me) if I want to replace something
function ask-for-replace () {
    while true; do
    yn="" # maybe stupid? So that vared does not echo back last value
    vared -cp "Do you wish to replace $1?" yn
    echo "\n"
    case $yn in
        [Yy]* ) cp etc/$1 $2; break;;
        [Nn]* ) break;;
        * ) echo "Please answer yes or no.\n";;
    esac
    done
}

function systemd-service-query-or-create() {
    arg=$1

    service_file=${arg}.service
    status_result=$(systemctl status $arg)

    if [[ $status_result =~ ".*Loaded: not-found.*" ]]; then
        cp etc/$service_file /etc/systemd/system/$service_file
    fi
}

function systemd-service-assert-enabled() {
    arg=$1

    status_result=$(systemctl $2 status $arg)
    if [[ $status_result =~ ".*disabled.*" ]]; then
        systemctl $2 enable $arg
        systemctl $2 start $arg
    fi
}

function assert-dir-exists() {
    if ! [[ -d "$1" ]]; then
        mkdir -p $1
    fi
}

function my-git-late-ci() {
    if ! [[ $# -gt 0 ]]; then
        echo "git-late-ci: Not enough arguments provided."
        return
    fi

    local hours=0
    local mins=0
    local index=0
    local start_of_git=0

    # find hours/mins arguments
    for arg in "$@"
    do
        if [[ $arg = "-z" ]]; then
            if ! [[ $# -gt ((index + 1)) ]]; then
                echo "git-late-ci: Numeric minutes argument should follow k-z"
                return
            fi

            mins="$argv[((index+2))]"
            start_of_git=$((index+3))
        elif [[ $arg = "-h" ]]; then
            if ! [[ $# -gt ((index + 1)) ]]; then
                echo "git-late-ci: Numeric hours argument should follow -h"
                return
            fi

            hours="$argv[((index+2))]"
            start_of_git=$((index+3))
        fi

        ((index += 1))
    done

    newdate=$(date -d "now + $hours hour $mins minutes")
    commit_result=$(env GIT_AUTHOR_DATE=${newdate} GIT_COMMITTER_DATE=${newdate} git commit "${@:$start_of_git}")

    return $?
}

function my-noop() {}

function my-docker-start() {
docker run -v /home/lefteris/pw/dpdk_p2:/home/oracle/dpdk_p2 --rm -i -t docker-registry.service.consul-ber.de.oracle.com/oracle_linux_pld_base:7.0 /sbin/my_init -- sudo -u oracle -i
}
